"""{{ project_name }} - Trading Expert

Generated by MetaExpert CLI
Exchange: {{ exchange }}
Strategy: {{ strategy }}
Market Type: {{ market_type }}
"""

import os
from dotenv import load_dotenv
from metaexpert import MetaExpert

# Load environment variables
load_dotenv()

expert = MetaExpert(
    # Exchange Configuration
    exchange="{{ exchange }}",
    api_key=os.getenv("{{ exchange | upper }}_API_KEY"),
    api_secret=os.getenv("{{ exchange | upper }}_API_SECRET"),
    {% if requires_passphrase -%}
    api_passphrase=os.getenv("{{ exchange | upper }}_API_PASSPHRASE"),
    {% endif -%}
    
    # Market Configuration
    market_type="{{ market_type }}",
    {% if market_type == "futures" -%}
    contract_type="{{ contract_type }}",
    margin_mode="{{ margin_mode }}",
    position_mode="{{ position_mode }}",
    {% endif -%}
    
    # Connection
    testnet=os.getenv("TESTNET", "true").lower() == "true",
    
    # Logging
    log_level=os.getenv("LOG_LEVEL", "INFO"),
    log_to_console=True,
)


@expert.on_init(
    # Trading Parameters
    symbol="{{ symbol | default('BTCUSDT') }}",
    timeframe="{{ timeframe | default('1h') }}",
    lookback_bars={{ lookback_bars | default(100) }},
    
    # Strategy Configuration
    strategy_id={{ strategy_id | default(1001) }},
    strategy_name="{{ strategy_name | default('My Strategy') }}",
    
    # Risk Management
    leverage={{ leverage | default(10) }},
    size_type="risk_based",
    size_value={{ size_value | default(1.5) }},
    stop_loss_pct={{ stop_loss_pct | default(2.0) }},
    take_profit_pct={{ take_profit_pct | default(4.0) }},
)
def init() -> None:
    """Initialize strategy."""
    print("*** Strategy Initialized ***")
    {% if strategy != "template" -%}
    # {{ strategy | upper }} Strategy Implementation
    # TODO: Add your {{ strategy }} strategy logic here
    {% endif %}


@expert.on_deinit
def deinit(reason: str) -> None:
    """Cleanup on shutdown."""
    print(f"*** Strategy Shutdown: {reason} ***")


{% if strategy == "ema" -%}
# @expert.on_bar()
# def bar(rates) -> None:
#     """EMA crossover strategy logic."""
#     # TODO: Implement EMA calculation
#     # 1. Calculate fast EMA (e.g., 12 periods)
#     # 2. Calculate slow EMA (e.g., 26 periods)
#     # 3. Generate signals on crossover
#     pass
{% elif strategy == "rsi" -%}
# @expert.on_bar()
# def bar(rates) -> None:
#     """RSI strategy logic."""
#     # TODO: Implement RSI calculation
#     # 1. Calculate RSI (e.g., 14 periods)
#     # 2. Generate buy signal when RSI < 30 (oversold)
#     # 3. Generate sell signal when RSI > 70 (overbought)
#     pass
{% elif strategy == "macd" -%}
# @expert.on_bar()
# def bar(rates) -> None:
#     """MACD strategy logic."""
#     # TODO: Implement MACD calculation
#     # 1. Calculate MACD line
#     # 2. Calculate signal line
#     # 3. Generate signals on crossover
#     pass
{% else -%}
@expert.on_bar()
def bar(rates) -> None:
    """Process new bar data."""
    print("*** Processing Bar ***", rates)
    # TODO: Implement your strategy logic here
{% endif %}


@expert.on_timer(60)
def timer() -> None:
    """Periodic checks (every 60 seconds)."""
    print("*** Timer Tick ***")


def main() -> None:
    """Entry point."""
    expert.run(
        trade_mode="paper",  # Change to "live" for real trading
        initial_capital=10000,
    )


if __name__ == "__main__":
    main()

