"""CLI command to create a new expert project."""

import shutil
from pathlib import Path

import typer


def cmd_new(
        project_name: str = typer.Argument(..., help="The name of the new expert project."),
        exchange: str = typer.Option(
            "binance", "--exchange", "-e", help="The target exchange."
        ),
        force: bool = typer.Option(
            False, "--force", "-f", help="Overwrite existing directory."
        ),
) -> None:
    """Creates a new trading expert project from a template."""
    project_path = Path(project_name)

    if project_path.exists():
        if not force:
            typer.secho(
                f"Error: Directory '{project_name}' already exists. Use --force to overwrite.",
                fg=typer.colors.RED,
            )
            raise typer.Exit(code=1)
        else:
            typer.secho(
                f"Warning: Overwriting existing directory '{project_name}'.",
                fg=typer.colors.YELLOW,
            )
            shutil.rmtree(project_path)

    try:
        project_path.mkdir(parents=True)

        # --- Create main.py from template ---
        template_path = Path(__file__).parent / "templates" / "template.py"
        with open(template_path) as f:
            template_content = f.read()

        # Modify exchange if specified
        modified_content = template_content.replace(
            'exchange="binance"', f'exchange="{exchange}"'
        )

        (project_path / "main.py").write_text(modified_content)

        # --- Create pyproject.toml ---
        pyproject_content = f"""[project]
name = "{project_name}"
version = "0.1.0"
description = "A trading expert generated by MetaExpert."
authors = [{{ name = "Your Name", email = "you@example.com" }}]

[tool.uv.workspace]
members = ["../../"]
"""
        (project_path / "pyproject.toml").write_text(pyproject_content)

        # --- Create .env.example ---
        env_content = """# Required for live trading
EXCHANGE_API_KEY="YourApiKey"
EXCHANGE_API_SECRET="YourApiSecret"
# EXCHANGE_API_PASSPHRASE="YourApiPassphrase" # if required by exchange
"""
        (project_path / ".env.example").write_text(env_content)

        # --- Create README.md ---
        readme_content = f"""# {project_name}

This trading expert was generated by [MetaExpert](https://github.com/teratron/metaexpert-gemini).

## Getting Started

1.  **Install dependencies**: `uv pip install -r requirements.txt`
2.  **Configure credentials**: Copy `.env.example` to `.env` and fill in your API keys.
3.  **Run the expert**: `metaexpert run`
"""
        (project_path / "README.md").write_text(readme_content)

        # --- Create .gitignore ---
        gitignore_content = """# Environments
.env

# Python
__pycache__/
*.pyc

# IDE
.vscode/
.idea/
"""
        (project_path / ".gitignore").write_text(gitignore_content)

        typer.secho(
            f"Successfully created new expert '{project_name}' at {project_path.resolve()}",
            fg=typer.colors.GREEN,
        )

    except Exception as e:
        typer.secho(f"Error creating project: {e}", fg=typer.colors.RED)
        raise typer.Exit(code=1)
