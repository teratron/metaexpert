[project]
name = "metaexpert"
version = "0.3.13"
description = "MetaExpert is a Python library for cryptocurrency trading that provides a unified interface for multiple exchanges and trading types. The system is designed to be modular, extensible, and easy to use while maintaining high performance and reliability."
authors = [{ name = "Oleg Alexandrov", email = "alexandrovoleg.ru@gmail.com" }]
license = { text = "MIT License" }
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
]
keywords = [
    "trading",
    "forex",
    "crypto",
    "binance",
    "bybit",
    "okx",
    "mexc",
    "technical analysis",
    "finance",
    "investment",
]
dependencies = [
    "structlog>=25.4.0",
    "rich>=13.0.0",
    "pydantic>=2.12.3",
    "pydantic-settings>=2.0.0",
    "psutil>=7.1.2",
    "typer>=0.20.0",
    "websockets>=15.0.1",
    "jinja2>=3.1.0",
]

[project.urls]
homepage = "https://teratron.github.io/metaexpert"
documentation = "https://teratron.github.io/metaexpert/docs"
repository = "https://github.com/teratron/metaexpert.git"

[project.scripts]
metaexpert = "metaexpert:main"
generate-docs = "scripts.generate_docs:main"
# example-binance = "examples/example_binance_ema:main"
# example-bybit = "examples/example_bybit_rsi:main"
# example-okx = "examples/example_okx_macd:main"

[dependency-groups]
dev = [
    "python-dotenv>=1.1.1",
    "pyright>=1.1.407",
    "specify-cli",
]
test = [
    "pytest>=8.3.4",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.14.0",
]
lint = [
    "ruff>=0.14.2",
]
docs = [
    "mkdocs-material>=9.6.22",
]

[tool.uv]
package = true
link-mode = "copy"
default-groups = [
    "dev",
    "test",
    "lint",
    "docs",
]

[tool.uv.sources]
specify-cli = { git = "git+https://github.com/github/spec-kit" }

[tool.uv.workspace]
members = [
    "examples/expert_binance_ema",
    "examples/expert_bybit_rsi",
    "examples/expert_okx_macd",
    "examples/expert_mexc_psar",
]

[tool.ruff]
fix = true
line-length = 88
target-version = "py312"
src = [
    "src",
    "examples",
    "tests",
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "template.py",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "C",      # flake8-comprehensions
    "B",      # flake8-bugbear
    "N",      # flake8-noqa
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    #"N805",   # First argument of a method should be named `self` (ignored for Pydantic validators)
]

[tool.ruff.lint.isort]
known-first-party = ["metaexpert"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.pyright]
pythonVersion = "3.12"
venvPath = "."
venv = ".venv"
pythonPlatform = "Darwin"
include = [
    "src/metaexpert",
    "examples",
    "tests",
]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "*.egg-info",
    ".venv",
    "build",
    "dist",
]
ignore = [
    "tests/**",
]
defineConstant = { "DEBUG" = true }
typeshedPath = ""
stubPath = ""
useLibraryCodeForTypes = true
typeCheckingMode = "basic"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
enableTypeIgnoreComments = true
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportMissingSuperCall = "none"
reportUninitializedInstanceVariable = "error"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "none"
reportPropertyTypeMismatch = "error"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"
reportPrivateUsage = "warning"
reportConstantRedefinition = "error"
reportDeprecated = "warning"
reportInconsistentConstructor = "error"
