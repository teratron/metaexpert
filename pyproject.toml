[project]
name = "metaexpert"
version = "0.1.0"
description = "MetaExpert library"
authors = [{ name = "Oleg Alexandrov", email = "alexandrovoleg.ru@gmail.com" }]
license = { text = "MIT License" }
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
]
keywords = ["trading", "crypto", "binance", "ta-lib", "technical analysis"]
dependencies = [
    "websocket-client>=1.8.0",
    "matplotlib>=3.10.3",
    "numpy>=2.3.1",
    "pandas>=2.3.0",
]

[project.urls]
homepage = "https://teratron.github.io/metaexpert"
documentation = "https://teratron.github.io/metaexpert/docs"
repository = "https://github.com/teratron/metaexpert.git"

[project.scripts]
metaexpert = "metaexpert.__main__:main"
#binance-ema = "examples/expert_binance_ema:main"

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "python-dotenv>=1.1.1",
    "types-defusedxml>=0.7.0.20250516",
    "types-requests>=2.32.4",
    "pyleak>=0.1.11",
    "pandas-stubs>=2.2.3.250527",
]
test = [
    "pytest>=8.3.4",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
]
lint = ["ruff>=0.11.4"]
docs = []

[tool.uv]
package = true
link-mode = "copy"
default-groups = ["dev", "test", "lint", "docs"]

[tool.uv.sources]
#metaexpert-binance-api = { path = "packages/api/binance" }
#metaexpert-bybit-api = { path = "packages/api/bybit" }
#metaexpert-binance-api = { workspace = true }
#metaexpert-bybit-api = { workspace = true }
#metaexpert-examples = { path = "examples" }
#expert-binance-ema = { path = "examples/expert_binance_ema" }
#expert-bybit-rsi = { path = "examples/expert_bybit_rsi" }

[tool.uv.workspace]
members = [
    "packages/app",
    "examples/expert_binance_ema",
    "examples/expert_bybit_rsi",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "C",      # flake8-comprehensions
    "B",      # flake8-bugbear
    "N",      # flake8-noqa
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "RUF012"  # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.lint.isort]
known-first-party = ["metaexpert"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
implicit_reexport = false
show_error_codes = true
show_column_numbers = true

# Игнорировать определенные файлы и директории
[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "numpy.*",
    "pandas.*",
    "websocket_client.*",
]
ignore_missing_imports = true
